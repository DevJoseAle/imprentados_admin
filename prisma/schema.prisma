generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store{
  id          String    @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categorie   Category[] @relation("StoreToCategory")
  subcategory Subcategory[] @relation("StoreToSubcategory")
  products    Product[] @relation("StoreToProduct")
  isFeatured  Boolean @default(false)
  order       Order[] @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


}
model Billboard{
  id           String    @id @default(uuid())
  storeId      String
  store        Store @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  label        String
  imageUrl     String
  categories   Category[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  atHomePage  Boolean @default(false)

  @@index([storeId])

}

model Category{
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToCategory", fields: [storeId], references: [id],onDelete: Cascade)
  billboardID   String
  billboard     Billboard @relation(fields: [billboardID], references: [id], onDelete: Cascade)
  product       Product[] @relation("CategoryToProduct")
  subcategory   Subcategory[] @relation("SubcategoryToCategory")
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([storeId])
  @@index([billboardID])
}

model Subcategory{
  id         String @id @default(uuid())
  storeId    String
  store      Store @relation("StoreToSubcategory", fields: [storeId], references: [id], onDelete: Cascade)
  product    Product[] @relation("SubcategoryToProduct")
  categoryID String
  category   Category @relation("SubcategoryToCategory", fields: [categoryID], references: [id], onDelete: Cascade)
  hasPrice   Boolean
  name       String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryID])

}

model Product{
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryID    String
  category      Category @relation("CategoryToProduct", fields: [categoryID], references: [id], onDelete: Cascade)
  subcategoryID String
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryID], references: [id],onDelete: Cascade)
  hasPrice      Boolean @default(false)
  isFeatured    Boolean @default(false) 
  isArchived    Boolean @default(false)
  price         Decimal
  name          String
  description   String @default("")
  images        Image[]
  orderItem     OrderItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([storeId])
  @@index([categoryID])
  @@index([subcategoryID])


}

model Image {
  id            String @id @default(uuid())
  productID     String
  product       Product @relation(fields: [productID], references: [id], onDelete: Cascade)
  url           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productID])

}
model Order {
  id             String @id @default(uuid())
  storeId        String
  store          Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItem      OrderItem[]
  isPaid         Boolean @default(false)
  address        String @default("")
  phone          String @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([storeId])

}

model OrderItem{
  id             String @id @default(uuid())
  orderID   String
  order Order @relation(fields:[orderID], references: [id] )
  productID String
  product Product @relation(fields:[productID], references: [id])

  @@index([orderID])
  @@index([productID])
}